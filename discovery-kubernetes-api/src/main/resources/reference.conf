######################################################
# Akka Service Discovery Kubernetes API Config       #
######################################################

akka.discovery {
  # Set the following in your application.conf if you want to use this discovery mechanism:
  # method = kubernetes-api

  kubernetes-api {
    class = akka.discovery.kubernetes.KubernetesApiServiceDiscovery

    # API server, cert and token information. Currently these are present on K8s versions: 1.6, 1.7, 1.8, and perhaps more
    api-ca-path = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    api-token-path = "/var/run/secrets/kubernetes.io/serviceaccount/token"
    api-service-host-env-name = "KUBERNETES_SERVICE_HOST"
    api-service-port-env-name = "KUBERNETES_SERVICE_PORT"

    # Namespace discovery path
    #
    # If this path doesn't exist, the namespace will default to "default".
    pod-namespace-path = "/var/run/secrets/kubernetes.io/serviceaccount/namespace"

    # Namespace to query for pods.
    #
    # Set this value to a specific string to override discovering the namespace using pod-namespace-path.
    pod-namespace = "<pod-namespace>"

    # Domain of the k8s cluster
    pod-domain = "cluster.local"

    # Selector value to query pod API with.
    # `%s` will be replaced with the configured effective name, which defaults to the actor system name
    pod-label-selector = "app=%s"

    # Enables the usage of the raw IP instead of the composed value for the resolved target host
    use-raw-ip = false

    # When set, validate the container is not in 'waiting' state
    container-name = ""
  }
}
